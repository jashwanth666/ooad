print("IMPLEMENT THE ALPHA BETA PRUNING FOR GAMING")
MAX, MIN = 1000, -1000
def minimax(depth, nodeIndex, maximizingPlayer,
            values, alpha, beta):
    if depth == 3:
        return values[nodeIndex]
    if maximizingPlayer:
        best = MIN
        for i in range(0, 2):
            val = minimax(depth + 1, nodeIndex * 2 + i,
                          False, values, alpha, beta)
            best = max(best, val)
            alpha = max(alpha, best)
            if beta <= alpha:
                break
        return best
    else:
        best = MAX
        for i in range(0, 2):
            val = minimax(depth + 1, nodeIndex * 2 + i,
                            True, values, alpha, beta)
            best = min(best, val)
            beta = min(beta, best)
            if beta <= alpha:
                break  
        return best  
if _name_ == "_main_":
    values = [52, 95, 97, 50, 67, 82, 34, -13] 
    print("The optimal value is :", minimax(0, 0, True, values, MIN, MAX)







2)traveling_salesman
import itertools
import math

def euclidean_distance(point1, point2):
    return int(math.sqrt((point1[0] - point2[0])**2 + (point1[1] - point2[1])**2))

def total_distance(path, cities):
    return sum(euclidean_distance(cities[path[i]], cities[path[i+1]]) for i in range(len(path)-1))

def traveling_salesman(cities):
    n = len(cities)
    min_distance = float('inf')
    best_path = None
    for path in itertools.permutations(range(n)):
        distance = total_distance(path, cities)
        if distance < min_distance:
            min_distance = distance
            best_path = path
    return best_path, min_distance

if __name__ == "__main__":
    cities = [(0, 0), (1, 4), (3, 2), (3, 1)]
    best_path, min_distance = traveling_salesman(cities)
    print(cities)
    print(f"The best path is {best_path} with a total distance of {min_distance}")


3)dfs 
from collections import defaultdict
def dfs(graph, start):
    visited = set()
    stack = [start]
    while stack:
        node = stack.pop()
        if node not in visited:
            print(node, end=" ")
            visited.add(node)
            stack.extend(neighbor for neighbor in graph[node] if neighbor not in visited)
if __name__ == "__main__":
    graph = defaultdict(list)
    graph[0] = [1, 2]
    graph[1] = [2]
    graph[2] = [0, 3]
    graph[3] = [3]
    print("\nDFS traversal:")
    dfs(graph, 2)




4)bfs 
from collections import defaultdict
def bfs(graph, start):
    visited = set()
    queue = [start]
    visited.add(start)
    while queue:
        node = queue.pop(0)
        print(node, end=" ")
        for neighbor in graph[node]:
            if neighbor not in visited:
                queue.append(neighbor)
                visited.add(neighbor)

if __name__ == "__main__":
    graph = defaultdict(list)
    graph[0] = [1, 2]
    graph[1] = [2]
    graph[2] = [0, 3]
    graph[3] = [3]
    print("BFS traversal:")
    bfs(graph, 2)







5)tic tac toe
def sum(a,b,c):
    return a+b+c
def printBoard(xState , zState):

    zero =  'X' if xState[0] else('@' if zState[0] else 0 )
    one =  'X' if xState[1] else('@' if zState[1] else 1 )
    two =  'X' if xState[2] else('@' if zState[2] else 2 )
    three =  'X' if xState[3] else('@' if zState[3] else 3 )
    four =  'X' if xState[4] else('@' if zState[4] else 4 )
    five =  'X' if xState[5] else('@' if zState[5] else 5 )
    six =  'X' if xState[6] else('@' if zState[6] else 6 )
    seven =  'X' if xState[7] else('@' if zState[7] else 7 )
    eight =  'X' if xState[8] else('@' if zState[8] else 8 )

    print(f" {zero} | {one} | {two} ")
    print(f"---|---|---")
    print(f" {three} | {four} | {five} ")
    print(f"---|---|---")
    print(f" {six} | {seven} | {eight} ")

def checkWin(xState,zState) : 
    wins = [[0,1,2], [3,4,5], [6,7,8], [0,3,6], [1,4,7], [2,5,8], [0,4,8], [2,4,6]]
    for win in wins :
        if(sum(xState[win[0]], xState[win[1]], xState[win[2]]) == 3) :
            print("X won the game")
            return 1
        if(sum(zState[win[0]], zState[win[1]], zState[win[2]]) == 3) :
            print("O won the game.")
            return 0
    return -1

if __name__ == "__main__" : 

    total_turns = 9

    xState = [0, 0, 0, 0, 0, 0, 0, 0, 0 ]
    zState = [0, 0, 0, 0, 0, 0, 0, 0, 0 ]
    turn = 1 # 1 for X and 0 for O
    print("Welcome to TIC-TAC-TOE")
    while(True) : 
        printBoard(xState, zState)
        if(turn == 1):
            print("X's Chance")
            value = int(input("Please enter a value : "))
            xState[value] = 1
        else :
            print("O's Chance")
            value = int(input("Please enter a value : "))
            zState[value] = 1

        total_turns = total_turns - 1

        if(checkWin(xState, zState) != -1 or total_turns == 0 ):
            print("GAME OVER")
            printBoard(xState, zState)
            break
        turn = 1 -  turn






6)bfs pl
edge(a, b, 4).
edge(a, c, 3).
edge(b, d, 5).
edge(b, e, 2).
edge(c, f, 6).
edge(c, g, 7).

best_first_search(Start, Goal, Path) :-
    best_first_search_recursive([node(Start, [])], Goal, Path).

best_first_search_recursive([node(Goal, Path) | _], Goal, Path).

best_first_search_recursive([node(Current, CurrentPath) | Rest], Goal, Path) :-
    findall(node(Next, [Next | CurrentPath]), edge(Current, Next, _), NextNodes),
    append(Rest, NextNodes, NewQueue),
    sort_queue(NewQueue, SortedQueue),
    best_first_search_recursive(SortedQueue, Goal, Path).

sort_queue(Queue, SortedQueue) :-
    predsort(compare_priority, Queue, SortedQueue).

compare_priority(Order, node(_, Path1), node(_, Path2)) :-
    length(Path1, Length1),
    length(Path2, Length2),
    compare(Order, Length1, Length2).






7)VacuumCleaner
class VacuumCleaner:
    def __init__(self):
        self.position = 0  # Position of the vacuum cleaner (0: Left, 1: Right)
        self.environment = [0, 0]  # Environment with dirty cells (0: Clean, 1: Dirty)

    def sense(self):
        return self.environment[self.position]

    def move(self):
        if self.position == 0:
            self.position = 1
        else:
            self.position = 0

    def clean(self):
        self.environment[self.position] = 0

    def run(self, steps):
        for _ in range(steps):
            current_state = self.sense()
            if current_state == 1:  # Dirty cell
                self.clean()
                print(f"Cleaned cell {self.position}")
            else:
                print(f"Cell {self.position} is already clean.")
            self.move()


if __name__ == "__main__":
    vacuum_cleaner = VacuumCleaner()
    steps = 5
    print("Initial environment:", vacuum_cleaner.environment)
    vacuum_cleaner.run(steps)
    print("Final environment:", vacuum_cleaner.environment)




8)start,end =[3,3,1],[0,0,0]
def do_action(state,action):
    if state[2] == 1:
        return [state[i] - action[i] for i in range(3)]
    else:
        return [state[i] + action[i] for i in range(3)]
def is_legal(state):
    if 0 <= state[0] <= 3 and 0 <= state[1] <= 3:
        return True
    else:
        return False
def is_bank_safe(bank):
    if bank[1] > bank[0] and bank[0] != 0:
        return False
    else:
        return True
def is_state_safe(state):
    other_bank = [start[i]-state[i] for i in range(3)]
    if is_bank_safe(state) and is_bank_safe(other_bank) :
        return True
    else:
        return False
def next_possible_actions(state):
    actions = [[1,0,1],[0,1,1],[1,1,1],[2,0,1],[0,2,1]]
    moves = []
    for i in actions:
        j = do_action(state,i)
        if is_legal(j) and is_state_safe(j):
            moves.append(j)
    return moves
solutions = []
def solve(next_action,path):
    _path = path.copy()
    if next_action == end:
        _path.append(next_action)
        solutions.append(_path)
        return
    elif next_action in path:
        return
    else:
        _path.append(next_action)
        for i in next_possible_actions(next_action):
            solve(i,_path)

solve([3,3,1],[])
print(*solutions,sep="\n")



9) feed forward neural network
import numpy as np


def relu(n):
    if n<0:
        return 0
    else:
        return n


inp=np.array([[-1,2],[2,2],[3,3]])
weights=[np.array([3,3]),np.array([1,5]),np.array([3,3]),np.array([1,5]),np.array([2,-1])]
for x in inp :
    node0=relu((x*weights[0]).sum())
    node1=relu((x*weights[1]).sum())
    node2=relu(([node0,node1]*weights[2]).sum())
    node3=relu(([node0,node1]*weights[3]).sum())
    op=relu(([node2,node3]*weights[4]).sum())
    print(x,op)